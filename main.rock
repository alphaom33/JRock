quote says "
newline is "
"
input says {"a": "c", "b": null}
print input

split input into charArray

what is charArray

why takes other giving input at index is totally other

consume takes toTake
	if not why taking toTake
		print "Expected " + toTake
		index is with 1
		give back false
	end
	index is with 1
	give back true
end

consumeToken takes token, type
	if token at "type" isn't type
		print "Expected '" + type + "'"
		index is with 1
		give back false
	end
	index is with 1
	give tokens at index - 1 back
end

eat takes toTake
	while consume taking toTake
		print ""
	end
	print "That was a fake expected don't worry about it"
	index is with -1
	give nothing back
end

eatWhite takes nothing
	let tmp be input at index
	while tmp is " " or tmp is newLine
		index is with 1
		let tmp be input at index
	end
end

parseString takes nothing
	consume taking quote
	let start be index
	while not why taking quote
		index is with 1
	end
	str is ""
	while start < index
		str is with input at start
		start is with 1
	end
	give giveThing taking "string", str back
end

contains takes str, thing
	split str into ohmy
	jndex is 0
	let len be ohmy + 0
	while jndex < len
		if ohmy at jndex is thing
			give true back
		end
		jndex is with 1
	end
	false
end

isNumber takes thing
	numbers is "1234567890"
	contains taking numbers, thing
end

pow takes first, second
	out is 1
	while second > 0
		let out be out * first
		second is with -1
	end
	while second < 0
		let out be out / first
		second is with 1
	end
	out
end

parseNumber takes nothing
	if input at index is "-"
		let isNegative be true
		index is with 1
	end
	let iPart be ""
	while isNumber taking input at index
		iPart is with input at index
		index is with 1
	end
	if input at index is "."
		consume taking "."
		let fPart be ""
		while isNumber taking input at index
			fPart is with input at index
			index is with 1
		end
	end
	if input at index is "e" or input at index is "E"
		index is with 1
		if input at index is "+"
			consume taking "+"
		end
		if input at index is "-"
			let powNegative be true
			consume taking "-"
		end
		let powPart be ""
		while isNumber taking input at index
			powPart is with input at index
			index is with 1
		end
	end
	index is with -1
	number is 0
	if iPart
		cast iPart with 10
		number is with iPart
	end
	if fPart
		split fPart into ack
		let len be pow taking 10, ack + 0
		cast fPart with 10
		let fPart be fPart / len
		number is with fPart
	end
	if powPart
		cast powPart with 10
		if powNegative
			let powPart be powPart * -1
		end
		let multiplier be pow taking 10, powPart
		let number be number * multiplier
	end
	if isNegative
		let number be number * -1
	end
	give giveThing taking "number", number back
end

alpha is "abcdefghijklmnopqrstuvwxyz"

parseKeyword takes nothing
    let out be ""
    while contains taking alpha, input at index
        out is with input at index
        index is with 1
    end
	index is with -1
    give out back
end

giveThing takes type, value
	let out at "type" be type
	let out at "value" be value
	give out back
end

let whitespace be " "
let whiespace be with newline
index is 0
basics says {}:,[]
print charArray
while index < charArray
	if contains taking basics, input at index
		rock tokens with giveThing taking input at index, input at index
	else if input at index is quote
	    rock tokens with parseString taking ""
	else if isNumber taking input at index or input at index is "-"
        rock tokens with parseNumber taking ""
    else if not contains taking whitespace, input at index
        let key be parseKeyword taking ""
        if key is "null"
            rock tokens with giveThing taking "null", null
        else if key is "true"
		    rock tokens with giveThing taking "boolean", true
        else if key is "false"
			rock tokens with giveThing taking "boolean", false
		else
            print "' is not a recognized keyword"
			write "'" + key
    end
	end
	index is with 1
end

print tokens

parseArray takes nothing
	consumeToken taking tokens at index, "["
	let startDex be 0
	while index < tokens
		let tmp be tokens at index
		let array at startDex be doValue taking tokens at index
		let tmp be tokens at index
		if tmp at "type" is ","
			consumeToken taking tokens at index, ","
		else if tmp at "type" is "]"
			consumeToken taking tokens at index, "]"
			break
		else
			print "what"
		end
		startDex is with 1
	end
	give array back
end

doValue takes token
	if token at "type" is "string" or token at "type" is "number"
		let value be consumeToken taking tokens at index, token at "type"
		give value at "value" back
	else if token at "type" is "boolean"
		index is with 1
		if token at "value" is "true"
			give true back
		else 
			give false back
		end
	else if token at "type" is "null"
		index is with 1
		give nothing back
	else if token at "type" is "{"
		consumeToken taking token, "{"
		give eatJSON taking "" back
	else if token at "type" is "["
		give parseArray taking "" back
	end
end

print "". print "". print ""
index is 0
consumeToken taking tokens at index, "{"
eatJSON takes nothing
	while index < tokens
		let key be consumeToken taking tokens at index, "string"
		consumeToken taking tokens at index, ":"
		let json at key at "value" be doValue taking tokens at index
		let tmp be tokens at index
		if tmp at "type" is ","
			consumeToken taking tokens at index, ","
		else if tmp at "type" is "}"
			consumeToken taking tokens at index, "}"
			break
		else
			toPrint says Expected ',' or '}'
			print toPrint
		end
	end
	give json back
end
let json be eatJSON taking ""

print json
